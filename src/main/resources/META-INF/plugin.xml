<!-- `url` specifies the URL of the plugin homepage (can be opened from "Plugins" settings dialog) -->
<idea-plugin url="https://plugins.jetbrains.com/plugin/12300-call-graph">
    <!-- Plugin name -->
    <name>Call Graph</name>

    <!-- Unique identifier of the plugin. Cannot be changed between the plugin versions.
         If not specified, assumed to be equal to <name>. -->
    <id>call-graph</id>

    <!-- Description of the plugin. -->
    <description><![CDATA[
      <p>A plug-in to visualize function call graph of any codebase for IDEs based on the IntelliJ platform.</p>
      <p>The goal is to make codebase extremely easy to understand, necessary for code navigation and debugging.</p>
      <p>
        Call Graph supports visualizing function calls within the entire project, a single module, or specific folder.
        It supports various graph navigation such as pan, zoom in/out,
        and is able to visualize all upstream and downstream calls of a single function.
      </p>
      <p>Currently it supports Java only. Other language support will come soon.</p>
      <p>See also:</p>
      <ul>
        <li>
          <a href="https://github.com/Chentai-Kao/call-graph-plugin-public/issues">Issue tracker</a>:
          feature requests and bug reports
        </li>
      </ul>
    ]]></description>

    <!-- Description of changes in the latest version of the plugin. Displayed in the "Plugins" settings dialog and
         in the plugin repository Web interface. -->
    <change-notes><![CDATA[
      <p>To be released:</p>
      <ul>
        <li>Support jumping from/to source code</li>
        <li>Various bug fixes</li>
      </ul>
      <p>0.1:</p>
      <ul>
        <li>Initial release</li>
        <li>Support for <code>Java</code></li>
        <li>
          Support for building call graph from functions of
          <b>entire project</b>, <b>single module</b>, or <b>single folder path</b>
        </li>
        <li>Support for two graph layouts: <b>fit to best ratio</b> and <b>fit to viewport</b></li>
        <li>Various bug fixes</li>
      </ul>
    ]]></change-notes>

    <!-- Plugin version (specified in build.gradle) -->
    <!-- <version>0.1.0</version> -->

    <!-- The vendor of the plugin. The optional "url" attribute specifies the URL of the vendor homepage.
         The optional "email" attribute specifies the e-mail address of the vendor.-->
    <vendor url="https://chent.ai" email="chentai.kao@gmail.com">Chentai Kao</vendor>

    <!-- The unique identifiers of the plugins on which this plugin depends. -->
    <depends>com.intellij.modules.lang</depends>

    <!-- Optional dependency on another plugin. If the plugin with the "com.MySecondPlugin" ID is installed,
         the contents of mysecondplugin.xml (the format of this file conforms to the format of plugin.xml)
         will be loaded. -->
    <!-- <depends optional="true" config-file="mysecondplugin.xml">com.MySecondPlugin</depends> -->

    <!-- Allows a plugin to integrate its help system (in JavaHelp format) with the IDE help system.
         The "file" attribute specifies the name of the JAR file in the "help" subdirectory of the plugin directory.
         The "path" attribute specifies the name of the helpset file within the JAR file.-->
    <!-- <helpset file="myhelp.jar" path="/Help.hs" /> -->

    <!-- Minimum and maximum build of IDE compatible with the plugin -->
    <idea-version since-build="162"/>

    <!-- Resource bundle (/messages/MyPluginBundle.properties) to be used with `key` attributes in extension points
         and implicit keys like `action.[pluginID].[ActionID].text` -->
    <!-- <resource-bundle xmlns="">messages.MyPluginBundle</resource-bundle> -->

    <!-- Plugin's application components (with component's interface and implementation class) -->
    <!--<application-components>
        <interface-class>com.foo.Component1Interface</interface-class>
        <implementation-class>com.foo.impl.Component1Impl</implementation-class>
    </application-components> -->

    <!-- Plugin's project components -->
    <!-- <project-components> -->
        <!-- <component> -->
            <!-- Interface and implementation classes are the same -->
            <!-- <implementation-class>com.foo.Component2</implementation-class> -->

            <!-- If the "workspace" option is set "true", the component
                 saves its state to the .iws file instead of the .ipr file.
                 Note that the <option> element is used only if the component
                 implements the JDOMExternalizable interface. Otherwise, the
                 use of the <option> element takes no effect.  -->
            <!-- <option name="workspace" value="true" /> -->

            <!-- If the "loadForDefaultProject" tag is present, the project component is instantiated also
                 for the default project. -->
            <!-- <loadForDefaultProject/> -->
        <!-- </component> -->
    <!-- </project-components> -->

    <!-- Plugin's module components -->
    <!-- <module-components>
        <component>
            <implementation-class>com.foo.Component3</implementation-class>
        </component>
    </module-components> -->

    <!-- Actions -->
    <!-- <actions>
        <action
             id="VssIntegration.GarbageCollection"
             class="com.foo.impl.CollectGarbage"
             text="Collect _Garbage"
             description="Run garbage collector">
            <keyboard-shortcut first-keystroke="control alt G" second-keystroke="C" keymap="$default"/>
        </action>
    </actions> -->

    <!-- Extension points defined by the plugin. Extension points are registered by a plugin so that other plugins
         can provide this plugin with certain data. The "beanClass" attribute specifies the class the implementations
         of which can be used for the extension point. -->
    <!-- <extensionPoints>
        <extensionPoint name="testExtensionPoint" beanClass="com.foo.impl.MyExtensionBean"/>
    </extensionPoints>
    -->

    <!-- Extensions which the plugin adds to extension points defined by the IntelliJ Platform or by other plugins.
         The "defaultExtensionNs " attribute must be set to the ID of the plugin defining the extension point,
         or to "com.intellij" if the extension point is defined by the IntelliJ Platform.
         The name of the tag within the <extensions> tag matches the name of the extension point,
         and the "implementation" class specifies the name of the class added to the extension point. -->
    <extensions defaultExtensionNs="com.intellij">
        <toolWindow
                id="Call Graph"
                secondary="true"
                icon="/icons/icon.svg"
                anchor="right"
                factoryClass="CallGraphToolWindowFactory"/>
    </extensions>

    <!-- <extensions defaultExtensionNs="com.intellij">
        <applicationConfigurable groupId="editor" instance="com.maddyhome.idea.vim.ui.VimEmulationConfigurable"/>
    </extensions> -->

    <!-- <extensions defaultExtensionNs="IdeaVIM">
        <vimExtension implementation="com.maddyhome.idea.vim.extension.surround.VimSurroundExtension"/>
        <vimExtension implementation="com.maddyhome.idea.vim.extension.multiplecursors.VimMultipleCursorsExtension"/>
        <vimExtension implementation="com.maddyhome.idea.vim.extension.commentary.CommentaryExtension"/>
    </extensions> -->

    <!-- Extensions which the plugin adds to extension points defined by the IntelliJ Platform or by other plugins.
         The "defaultExtensionNs " attribute must be set to the ID of the plugin defining the extension point,
         or to "com.intellij" if the extension point is defined by the IntelliJ Platform. The name of the tag
         within the <extensions> tag matches the name of the extension point, and the "implementation" class specifies
         the name of the class added to the extension point. -->
    <!-- <extensions xmlns="VssIntegration">
        <testExtensionPoint implementation="com.foo.impl.MyExtensionImpl"/>
    </extensions> -->
</idea-plugin>
